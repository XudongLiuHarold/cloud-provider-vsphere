/*
Copyright 2021 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "github.com/vmware-tanzu/vm-operator-api/api/v1alpha1"
)

// VirtualMachineServiceLister helps list VirtualMachineServices.
// All objects returned here must be treated as read-only.
type VirtualMachineServiceLister interface {
	// List lists all VirtualMachineServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineService, err error)
	// VirtualMachineServices returns an object that can list and get VirtualMachineServices.
	VirtualMachineServices(namespace string) VirtualMachineServiceNamespaceLister
	VirtualMachineServiceListerExpansion
}

// virtualMachineServiceLister implements the VirtualMachineServiceLister interface.
type virtualMachineServiceLister struct {
	indexer cache.Indexer
}

// NewVirtualMachineServiceLister returns a new VirtualMachineServiceLister.
func NewVirtualMachineServiceLister(indexer cache.Indexer) VirtualMachineServiceLister {
	return &virtualMachineServiceLister{indexer: indexer}
}

// List lists all VirtualMachineServices in the indexer.
func (s *virtualMachineServiceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineService))
	})
	return ret, err
}

// VirtualMachineServices returns an object that can list and get VirtualMachineServices.
func (s *virtualMachineServiceLister) VirtualMachineServices(namespace string) VirtualMachineServiceNamespaceLister {
	return virtualMachineServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMachineServiceNamespaceLister helps list and get VirtualMachineServices.
// All objects returned here must be treated as read-only.
type VirtualMachineServiceNamespaceLister interface {
	// List lists all VirtualMachineServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineService, err error)
	// Get retrieves the VirtualMachineService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualMachineService, error)
	VirtualMachineServiceNamespaceListerExpansion
}

// virtualMachineServiceNamespaceLister implements the VirtualMachineServiceNamespaceLister
// interface.
type virtualMachineServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMachineServices in the indexer for a given namespace.
func (s virtualMachineServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualMachineService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualMachineService))
	})
	return ret, err
}

// Get retrieves the VirtualMachineService from the indexer for a given namespace and name.
func (s virtualMachineServiceNamespaceLister) Get(name string) (*v1alpha1.VirtualMachineService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualmachineservice"), name)
	}
	return obj.(*v1alpha1.VirtualMachineService), nil
}
